window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "fermatrica_rep", "modulename": "fermatrica_rep", "kind": "module", "doc": "<p>FERMATRICA_REP reporting system for FERMATRICA econometrics framework.</p>\n"}, {"fullname": "fermatrica_rep.adstocks", "modulename": "fermatrica_rep.adstocks", "kind": "module", "doc": "<p>Calculate adstock (decay, carry-over) for number of variables</p>\n"}, {"fullname": "fermatrica_rep.adstocks.adstocks_data", "modulename": "fermatrica_rep.adstocks", "qualname": "adstocks_data", "kind": "function", "doc": "<p>Calculate data for adstocks plot: rate of decay per variable.\nBe careful selecting <code>cln_meas</code>: only variables immediately before decay transformation should be listed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>superbrand</strong>:  umbrella brand name</li>\n<li><strong>cln_meas</strong>:  list of measurements columns names (to calculate adstock from)</li>\n<li><strong>cln_dim</strong>:  list of dimension columns names</li>\n<li><strong>n</strong>:  number of observations per column</li>\n<li><strong>if_scaled</strong>:  to scale dividing by MAX value per measurement column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">superbrand</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cln_meas</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">cln_dim</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;master&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bs_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;listed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpi_coef&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">if_scaled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.analysis", "modulename": "fermatrica_rep.analysis", "kind": "module", "doc": "<p>Additional / in-deep / low-level analysis helpers and routines</p>\n"}, {"fullname": "fermatrica_rep.analysis.ols", "modulename": "fermatrica_rep.analysis.ols", "kind": "module", "doc": "<p>OLS low-level statistics analysis and helpers</p>\n"}, {"fullname": "fermatrica_rep.analysis.ols.get_model_ds", "modulename": "fermatrica_rep.analysis.ols", "qualname": "get_model_ds", "kind": "function", "doc": "<p>Decompose linear combinations from model regressors.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  statsmodels OLS model object</li>\n<li><strong>ds</strong>:  dataset</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">RegressionResultsWrapper</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.analysis.ols.trans", "modulename": "fermatrica_rep.analysis.ols", "qualname": "trans", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>: </li>\n<li><strong>params</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.analysis.ols.rhs_comparison", "modulename": "fermatrica_rep.analysis.ols", "qualname": "rhs_comparison", "kind": "function", "doc": "<p>Compare signs and regression coefficients between older (initial) and new (updated) models</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_init</strong>:  older model (statsmodels OLS model object)</li>\n<li><strong>model_upd</strong>:  new model (statsmodels OLS model object)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table with comparison between models</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_init</span><span class=\"p\">:</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">RegressionResultsWrapper</span>,</span><span class=\"param\">\t<span class=\"n\">model_upd</span><span class=\"p\">:</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">RegressionResultsWrapper</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.analysis.ols.impacts_comparison", "modulename": "fermatrica_rep.analysis.ols", "qualname": "impacts_comparison", "kind": "function", "doc": "<p>Compare impacts between older (initial) and new (updated) models</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_init</strong>:  older model (statsmodels OLS model object)</li>\n<li><strong>model_upd</strong>:  new model (statsmodels OLS model object)</li>\n<li><strong>ds_init</strong>:  older dataset</li>\n<li><strong>ds_upd</strong>:  new dataset</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_init</span><span class=\"p\">:</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">RegressionResultsWrapper</span>,</span><span class=\"param\">\t<span class=\"n\">model_upd</span><span class=\"p\">:</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">RegressionResultsWrapper</span>,</span><span class=\"param\">\t<span class=\"n\">ds_init</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ds_upd</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.basics", "modulename": "fermatrica_rep.basics", "kind": "module", "doc": "<p>Basic / common utilities required by FERMATRICA_REP.</p>\n"}, {"fullname": "fermatrica_rep.basics.coef_var_align", "modulename": "fermatrica_rep.basics", "qualname": "coef_var_align", "kind": "function", "doc": "<p>Align trans_path_df with regression coefficients. Used in rather simple models.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong>:  trans_path_df</li>\n<li><strong>coefs</strong>:  regression coefficients (from statsmodels model object)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table (dataframe) with merged data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">coefs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.basics.palette_fill", "modulename": "fermatrica_rep.basics", "qualname": "palette_fill", "kind": "function", "doc": "<p>Preserve colours between entities in different functions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entities_old</strong>:  dictionary of elements with already set colours</li>\n<li><strong>entities_new</strong>:  dictionary or list with elements to be checked with entities_old and added to it\nif not yet</li>\n<li><strong>palette_names</strong>:  colorcet palette names</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">entities_old</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">entities_new</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">palette_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;glasbey&#39;</span><span class=\"p\">,)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.category", "modulename": "fermatrica_rep.category", "kind": "module", "doc": "<p>Report fit and predict of the category model (additional model describing category or categories).</p>\n\n<p>For the fit and predict of the category model see <code>fermatrica_rep.fit</code></p>\n"}, {"fullname": "fermatrica_rep.category.category_data", "modulename": "fermatrica_rep.category", "qualname": "category_data", "kind": "function", "doc": "<p>Prepare data describing category model to plot or use as is.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>err_int</strong>:  error interval in decimal (typically .1, .05, .2 etc.)</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dataframe to be plotted</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">err_int</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.category.category_main_plot", "modulename": "fermatrica_rep.category", "qualname": "category_main_plot", "kind": "function", "doc": "<p>Plot fit and predict of the category model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  prepared dataset (after <code>category_data()</code>)</li>\n<li><strong>fig</strong>:  empty figure (effectively canvas)</li>\n<li><strong>row_n</strong>:  number of \"rows\" in canvas to be used</li>\n<li><strong>col_n</strong>:  number of \"columns\" in canvas to be used</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>filled figure (graphic object)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">plotly</span><span class=\"o\">.</span><span class=\"n\">graph_objs</span><span class=\"o\">.</span><span class=\"n\">_figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>,</span><span class=\"param\">\t<span class=\"n\">row_n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">col_n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.category.category_err_plot", "modulename": "fermatrica_rep.category", "qualname": "category_err_plot", "kind": "function", "doc": "<p>Plot errors of the category model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  prepared dataset (after <code>category_data()</code>)</li>\n<li><strong>fig</strong>:  empty figure (effectively canvas)</li>\n<li><strong>err_int</strong>:  error interval in decimals (typically .1, .05, .2 etc.)</li>\n<li><strong>row_n</strong>:  number of \"rows\" in canvas to be used</li>\n<li><strong>col_n</strong>:  number of \"columns\" in canvas to be used</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">plotly</span><span class=\"o\">.</span><span class=\"n\">graph_objs</span><span class=\"o\">.</span><span class=\"n\">_figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>,</span><span class=\"param\">\t<span class=\"n\">err_int</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">row_n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">col_n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.category.category_plot", "modulename": "fermatrica_rep.category", "qualname": "category_plot", "kind": "function", "doc": "<p>Main plot of the category model: fit, predict and errors</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>period</strong>:  time period / interval to group by</li>\n<li><strong>err_int</strong>:  error interval in decimal (typically .1, .05, .2 etc.)</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">err_int</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.curves", "modulename": "fermatrica_rep.curves", "kind": "module", "doc": "<p>Calculate efficiency curves per marketing tool.</p>\n\n<p>The version defined here is suited for models without LHS transformation only. It calculates curves\nusing transformation functions directly, so it is fast and (for user) simple.</p>\n\n<p>If your model is more complicated than just RHS, use <code>fermatrica_rep.curves_full</code> module instead.</p>\n"}, {"fullname": "fermatrica_rep.curves.curves_simple_data", "modulename": "fermatrica_rep.curves", "qualname": "curves_simple_data", "kind": "function", "doc": "<p>Prepare data to plot simple curves</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_p</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export setting)</li>\n<li><strong>budget_lim</strong>:  maximum budget per tool in millions</li>\n<li><strong>budget_step</strong>:  step in millions</li>\n<li><strong>if_precise</strong>:  some transformations could be calculated slow and precisely or fast and with small deviation</li>\n<li><strong>adstock_len</strong>:  number of periods to calculate decay / time effects (not only adstock)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table with curves data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_p</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">budget_lim</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">budget_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">if_precise</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">adstock_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.curves.curves_simple_plot", "modulename": "fermatrica_rep.curves", "qualname": "curves_simple_plot", "kind": "function", "doc": "<p>Plot efficiency curves per marketing tool.</p>\n\n<p>This version is designed for models without LHS transformation only. If your model is complicated,\nuse <code>fermatrica_rep.curves_full</code> module. That one is much more flexible, but also much slower.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  prepared dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>price</strong>:  product price</li>\n<li><strong>conv</strong>:  conversion rat</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">price</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conv</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.curves_full", "modulename": "fermatrica_rep.curves_full", "kind": "module", "doc": "<p>Calculate efficiency curves per marketing tool.</p>\n\n<p>The version defined here is general-purpose and could be used with models of any design.\nIt calculates curves with calculating row of budget options. This approach is model-blind\nand very convenient when model design is complex, LHS effects are great etc.</p>\n\n<p>However, it implies large amount of calculations, so it is rather slow and resource demanding\n(multiprocessing is used). If your model contains RHS only, you may consider using\n<code>fermatrica_rep.curves</code> module at least for WIP-analysis.</p>\n\n<p>Beware! This module contains only plot functions. Use outputs from <code>options.calc_multi.option_report_multi_post</code>\nas input data.</p>\n"}, {"fullname": "fermatrica_rep.curves_full.curves_full_plot_short", "modulename": "fermatrica_rep.curves_full", "qualname": "curves_full_plot_short", "kind": "function", "doc": "<p>Plot efficiency curves per marketing tool. \"Short\" means only short-term effect is measured:\nperiod of \"promoting\" is equal to period of effect calculating. (Not the same as \"on-air\",\nbecause in \"promoting\" period some silence dates could be included.)</p>\n\n<p>This version could be used with models of any design. It calculates curves with calculating\nrow of budget options. This approach is model-blind and convenient when model design is complex,\nLHS effects are great etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>curves_full_df</strong>:  prepared dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict of plotly figures</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">curves_full_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.curves_full.curves_full_plot_long", "modulename": "fermatrica_rep.curves_full", "qualname": "curves_full_plot_long", "kind": "function", "doc": "<p>Plot efficiency curves per marketing tool. \"Long\" means short-term and long-term effects\nare measured both: period of \"promoting\" is much shorter than period of effect calculating.</p>\n\n<p>This version could be used with models of any design. It calculates curves with calculating\nrow of budget options. This approach is model-blind and convenient when model design is complex,\nLHS effects are great etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>curves_full_df</strong>:  prepared dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict of plotly figures</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">curves_full_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.decomposition", "modulename": "fermatrica_rep.decomposition", "kind": "module", "doc": "<p>Decompose model into effects (impacts).</p>\n\n<p>This module describes dynamic decomposition, for waterfall decomposition see <code>fermatrica_rep.waterfall</code></p>\n"}, {"fullname": "fermatrica_rep.decomposition.decompose_basic", "modulename": "fermatrica_rep.decomposition", "qualname": "decompose_basic", "kind": "function", "doc": "<p>Simplistic decomposition from OLS statsmodels object. If possible, use <code>extract_effects</code> instead.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_cur</strong>:  OLS statsmodels object</li>\n<li><strong>ds</strong>:  dataset</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table of effects (impacts)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_cur</span><span class=\"p\">:</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">OLS</span> <span class=\"o\">|</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">OLSResults</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.decomposition.rhs_effects", "modulename": "fermatrica_rep.decomposition", "qualname": "rhs_effects", "kind": "function", "doc": "<p>Extract RHS effects from different type statsmodels models (at least LME ans OLS are supported).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_conf</strong>:  ModelConf</li>\n<li><strong>model_cur</strong>:  object of statsmodels model. Separately from model_conf because different models could be used</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>id_vars</strong>:  index (dimension) variables. Mostly ['date'], not very important</li>\n<li><strong>if_detail</strong>:  expand tokens</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_conf</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">model_cur</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">id_vars</span>,</span><span class=\"param\">\t<span class=\"n\">if_detail</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.decomposition.extract_effect", "modulename": "fermatrica_rep.decomposition", "qualname": "extract_effect", "kind": "function", "doc": "<p>Decompose complex model / extract effects (impacts) of all types.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>if_detail</strong>:  expand tokens</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table with column per every extracted effect / impact</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">if_detail</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.decomposition.decompose_main_plot", "modulename": "fermatrica_rep.decomposition", "qualname": "decompose_main_plot", "kind": "function", "doc": "<p>Plot main dynamic decomposition (without faceting)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>extract_effect()</code>)</li>\n<li><strong>brands</strong>:  list of umbrella brands to preserve</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>period</strong>:  time period / interval to group by</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>contour_line</strong>:  add contours or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">contour_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">plotly</span><span class=\"o\">.</span><span class=\"n\">graph_objs</span><span class=\"o\">.</span><span class=\"n\">_figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.decomposition.decompose_sub_plot", "modulename": "fermatrica_rep.decomposition", "qualname": "decompose_sub_plot", "kind": "function", "doc": "<p>Plot dynamic decomposition with faceting by <code>sku_var</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>extract_effect()</code>)</li>\n<li><strong>brands</strong>:  list of umbrella brands to preserve</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>sku_var</strong>:  list or tuple of variables to group by</li>\n<li><strong>period</strong>:  time period / interval to group by</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>contour_line</strong>:  add contours or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">sku_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;market&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">contour_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">plotly</span><span class=\"o\">.</span><span class=\"n\">graph_objs</span><span class=\"o\">.</span><span class=\"n\">_figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.elasticity_price", "modulename": "fermatrica_rep.elasticity_price", "kind": "module", "doc": "<p>Calculate price elasticity.</p>\n\n<p>Parallel computing is assuming in called functions.</p>\n"}, {"fullname": "fermatrica_rep.elasticity_price.elasticity_data", "modulename": "fermatrica_rep.elasticity_price", "qualname": "elasticity_data", "kind": "function", "doc": "<p>Get data to calculate price elasticity</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>opt_set</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>option</strong>:  specific option as dictionary</li>\n<li><strong>targets_new: apply option to one entity, summarize another (useful for cross-elasticity). If not None</strong>: \n{'targets_new': [], 'apply_vars_new': []}</li>\n<li><strong>step</strong>:  price step (in decimals)</li>\n<li><strong>price_range</strong>:  min and max prices to use as tuple</li>\n<li><strong>price_name_opt</strong>:  how price is named in <code>option</code> (\"price\", \"price_rel\" etc.)</li>\n<li><strong>cores</strong>:  number of processor cores to use in parallel computing (set None for automatic detecting)</li>\n<li><strong>if_exact</strong>:  apply only to specific time period, without next years</li>\n<li><strong>var</strong>:  \"exact\" or \"long\" dataset use for summarizing</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ready to plot price elasticity dataset</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">targets_new</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">price_range</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">price_name_opt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;price&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;exact&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.elasticity_price.price_grid", "modulename": "fermatrica_rep.elasticity_price", "qualname": "price_grid", "kind": "function", "doc": "<p>Create price grid from option, range and step</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>option</strong>:  specific option as dictionary</li>\n<li><strong>step</strong>:  price step (in decimals)</li>\n<li><strong>price_range</strong>:  min and max prices to use as tuple</li>\n<li><strong>price_name_opt</strong>:  how price is named in <code>option</code> (\"price\", \"price_rel\" etc.)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>price grid as dictionary of dictionaries</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">price_range</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">price_name_opt</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export", "modulename": "fermatrica_rep.export", "kind": "module", "doc": "<p>Exports data to XLSX (in some way, to be finished later) ot to PPTX. As for PPTX,\ngenerates PowerPoint presentation with standard slides describing model. Slides / components\navailable to export now are:</p>\n\n<ul>\n<li>Retro analysis\n<ul>\n<li>Fit and predict by superbrand</li>\n<li>Fit and predict by SKU / arbitrary set of variables</li>\n<li>Dynamic decomposition by superbrand</li>\n<li>Dynamic decomposition by SKU / arbitrary set of variables</li>\n<li>Waterfall decomposition for arbitrary historical period</li>\n</ul></li>\n<li>Marketing tools efficiency\n<ul>\n<li>Short-term curves\n<ul>\n<li>Incremental KPI volume</li>\n<li>Incremental KPI value</li>\n<li>ROI</li>\n</ul></li>\n<li>Long-term curves\n<ul>\n<li>Incremental KPI volume</li>\n<li>Incremental KPI value</li>\n<li>ROI</li>\n</ul></li>\n</ul></li>\n<li>Summary table for set of predefined budget options for future periods</li>\n<li>Detailed report for every predefined budget option for future periods\n<ul>\n<li>Fit and predict by superbrand</li>\n<li>Fit and predict by SKU / arbitrary set of variables</li>\n<li>Dynamic decomposition by superbrand</li>\n<li>Dynamic decomposition by SKU / arbitrary set of variables</li>\n<li>Waterfall decomposition for defined future period</li>\n</ul></li>\n</ul>\n"}, {"fullname": "fermatrica_rep.export.basics", "modulename": "fermatrica_rep.export.basics", "kind": "module", "doc": "<p>Basic utilities for PPTX export of FERMATRICA_REP modelling reporting.</p>\n"}, {"fullname": "fermatrica_rep.export.basics.set_chart_colors_line", "modulename": "fermatrica_rep.export.basics", "qualname": "set_chart_colors_line", "kind": "function", "doc": "<p>Set chart lines from marketing tools palette (<code>ModelRep.palette_tools</code>).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chart</strong>:  PPTX chart</li>\n<li><strong>model_rep</strong>:  ModelRep object</li>\n<li><strong>gridlines_color</strong>:  None or something like RGBColor(170, 170, 170)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chart</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">gridlines_color</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">RGBColor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.basics.set_chart_colors_fill", "modulename": "fermatrica_rep.export.basics", "qualname": "set_chart_colors_fill", "kind": "function", "doc": "<p>Set chart fill colours from marketing tools palette (<code>ModelRep.palette_tools</code>) + grid color</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chart</strong>:  PPTX chart</li>\n<li><strong>model_rep</strong>:  ModelRep object</li>\n<li><strong>gridlines_color</strong>:  None or something like RGBColor(170, 170, 170)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chart</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">gridlines_color</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">RGBColor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.basics.set_cell_border", "modulename": "fermatrica_rep.export.basics", "qualname": "set_cell_border", "kind": "function", "doc": "<p>Hack function to set border width and border color:\n    - left border\n    - right border\n    - top border\n    - bottom border</p>\n\n<p>Assigned is performed by reference, so not to be upset with 'not used' variables (actually used)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  table cell object to add border to</li>\n<li><strong>border_color</strong>:  border HEX color</li>\n<li><strong>border_width</strong>:  border with in ...</li>\n<li><strong>borders_positions</strong>:  any combination of 'left', 'right', 'top', 'bottom'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cell</span>,</span><span class=\"param\">\t<span class=\"n\">border_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FFFFFF&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">border_width</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12700&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">borders_positions</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;right&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;top&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bottom&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.basics.set_table_border", "modulename": "fermatrica_rep.export.basics", "qualname": "set_table_border", "kind": "function", "doc": "<p>Hack function to set border width and border color through entire table, zebra coloration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  Table object from python_pptx package</li>\n<li><strong>border_color</strong>:  border HEX color</li>\n<li><strong>border_width</strong>:  border with in ...</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">border_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;595959&#39;</span>, </span><span class=\"param\"><span class=\"n\">border_width</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12700&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.basics.fill_table", "modulename": "fermatrica_rep.export.basics", "qualname": "fill_table", "kind": "function", "doc": "<p>Fill table (as Table from python_pptx package) with data from <code>ds</code> dataset.\nUse it when generating PPTX slides.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  empty table (Table from python_pptx package)</li>\n<li><strong>ds</strong>:  dataset to be placed into <code>table</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.basics.set_chart_dashes", "modulename": "fermatrica_rep.export.basics", "qualname": "set_chart_dashes", "kind": "function", "doc": "<p>Filters series by <code>ptrn</code> regex pattern and set corresponding line type to dashed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chart</strong>:  Chart object from python_pptx package</li>\n<li><strong>ptrn</strong>:  pattern to select series to make dashed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Chart object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chart</span>, </span><span class=\"param\"><span class=\"n\">ptrn</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_extrapolated&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.basics.adjust_table_width", "modulename": "fermatrica_rep.export.basics", "qualname": "adjust_table_width", "kind": "function", "doc": "<p>Adjust table width to match slide width in PPTX.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  Table object from python_pptx package</li>\n<li><strong>slide_width</strong>:  slide width (should be saved in ModelRep object whith <code>config_set()</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Table object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">slide_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.basics.table_text_format", "modulename": "fermatrica_rep.export.basics", "qualname": "table_text_format", "kind": "function", "doc": "<p>Format text in table in PPTX.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  Table object from python_pptx package</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Table object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_pptx", "modulename": "fermatrica_rep.export.export_pptx", "kind": "module", "doc": "<p>Generate PowerPoint presentation with standard slides describing model. Slides / components\navailable to export now are:</p>\n\n<ul>\n<li>Retro analysis\n<ul>\n<li>Fit and predict by superbrand</li>\n<li>Fit and predict by SKU / arbitrary set of variables</li>\n<li>Dynamic decomposition by superbrand</li>\n<li>Dynamic decomposition by SKU / arbitrary set of variables</li>\n<li>Waterfall decomposition for arbitrary historical period</li>\n</ul></li>\n<li>Marketing tools efficiency\n<ul>\n<li>Short-term curves\n<ul>\n<li>Incremental KPI volume</li>\n<li>Incremental KPI value</li>\n<li>ROI</li>\n</ul></li>\n<li>Long-term curves\n<ul>\n<li>Incremental KPI volume</li>\n<li>Incremental KPI value</li>\n<li>ROI</li>\n</ul></li>\n</ul></li>\n<li>Summary table for set of predefined budget options for future periods</li>\n<li>Detailed report for every predefined budget option for future periods\n<ul>\n<li>Fit and predict by superbrand</li>\n<li>Fit and predict by SKU / arbitrary set of variables</li>\n<li>Dynamic decomposition by superbrand</li>\n<li>Dynamic decomposition by SKU / arbitrary set of variables</li>\n<li>Waterfall decomposition for defined future period</li>\n</ul></li>\n</ul>\n\n<p>There are two ways to generate presentation:</p>\n\n<ol>\n<li><code>create_presentation()</code> generates presentation at once, could look shorter, but is not flexible</li>\n<li>number of functions to generate presentation slide by slide (or block of slide after another).\nMore verbose, but also more flexible</li>\n</ol>\n"}, {"fullname": "fermatrica_rep.export.export_pptx.create_presentation", "modulename": "fermatrica_rep.export.export_pptx", "qualname": "create_presentation", "kind": "function", "doc": "<p>Generate reporting presentation in one step. Could look shorter, less flexible</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>opt_set</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>opt_set_crv</strong>:  OptionSetting object containing calculate settings for curve calculation</li>\n<li><strong>trans_dict</strong>:  translation dictionary (how to \"translate\" options into independent variables)</li>\n<li><strong>options_m</strong>:  dictionary of dictionaries defining options to calculate in detailed report and option table</li>\n<li><strong>target</strong>:  values in <code>apply_vars</code> columns to filter target entities to apply option</li>\n<li><strong>apply_vars</strong>:  columns (variables) to filter target entities to apply option</li>\n<li><strong>sku_var</strong>:  columns (variables) to report as \"SKU\" in detailed reporting</li>\n<li><strong>budget_step</strong>:  budget iteration step in millions, defaults to 1 (i.e. 1M) (to calculate curves)</li>\n<li><strong>cores</strong>:  number of processor cores to use in multiprocessing calculations.\nNone sets to all computer logical cores - 1</li>\n<li><strong>if_volume</strong>:  optimize volume or value KPI</li>\n<li><strong>if_exact</strong>:  apply only to specific time period, without next years</li>\n<li><strong>if_decompose</strong>:  include decomposition plot in retro reporting</li>\n<li><strong>if_waterfall</strong>:  include waterfall plot in retro reporting</li>\n<li><strong>if_options_table</strong>:  include options table</li>\n<li><strong>if_incr_roi</strong>:  include efficiency curves</li>\n<li><strong>if_options_slides</strong>:  include detailed reporting for every option</li>\n<li><strong>if_sku_fit_predict</strong>:  include fit-predict per SKU in options slides</li>\n<li><strong>if_sku_decompose</strong>:  include decomposition per SKU in options slides</li>\n<li><strong>if_sku_waterfall</strong>:  include waterfall per SKU in options slides</li>\n<li><strong>custom_extract_effect</strong>:  custom function to extract effect for decomposition and waterfall</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set_crv</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">trans_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">options_m</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">apply_vars</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">sku_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">budget_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">if_volume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_decompose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_waterfall</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_options_table</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_incr_roi</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_options_slides</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_sku_fit_predict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_sku_decompose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_sku_waterfall</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_extract_effect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_pptx.export_option_table", "modulename": "fermatrica_rep.export.export_pptx", "qualname": "export_option_table", "kind": "function", "doc": "<p>Export options summary as a table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>opt_set</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>options_m</strong>:  dictionary of dictionaries defining options to calculate in detailed report and option table</li>\n<li><strong>if_exact</strong>:  apply only to specific time period, without next years</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">options_m</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_pptx.export_option_detail", "modulename": "fermatrica_rep.export.export_pptx", "qualname": "export_option_detail", "kind": "function", "doc": "<p>Export detailing report per every option in <code>options_m</code> dictionary.\nSet <code>None</code> to <code>options_m</code> param to get retro analysis (w/o future period).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>opt_set</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>sku_var</strong>:  columns (variables) to report as \"SKU\" in detailed reporting</li>\n<li><strong>options_m</strong>:  dictionary of dictionaries defining options to calculate in detailed report and option table</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>if_volume</strong>:  optimize volume or value KPI</li>\n<li><strong>if_exact</strong>:  apply only to specific time period, without next years</li>\n<li><strong>if_fit</strong>:  include fit-predict plot</li>\n<li><strong>if_decompose</strong>:  include decomposition plot</li>\n<li><strong>if_waterfall</strong>:  include waterfall plot</li>\n<li><strong>if_sku_fit_predict</strong>:  include fit-predict per SKU</li>\n<li><strong>if_sku_decompose</strong>:  include decomposition per SKU</li>\n<li><strong>if_sku_waterfall</strong>:  include waterfall per SKU</li>\n<li><strong>custom_extract_effect</strong>:  custom function to extract effect for decomposition and waterfall</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">sku_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">options_m</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;month&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">if_volume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_fit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_decompose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_waterfall</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_sku_fit_predict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_sku_decompose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_sku_waterfall</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_extract_effect</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_pptx.export_curves", "modulename": "fermatrica_rep.export.export_pptx", "qualname": "export_curves", "kind": "function", "doc": "<p>Export efficiency curves (i.e. incremental KPI, profit, ROI) via full curves approach\n(row of options to be calculated). To get stable results run <code>fermatrica.options.calc.option_report()</code>\nwith some fixed option (as 'zero') and <code>exact=False</code> before.</p>\n\n<p>Right now just a wrapper, maybe to be extended later.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>trans_dict</strong>:  translation dictionary (how to \"translate\" options into independent variables)</li>\n<li><strong>opt_set_crv</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>budget_step</strong>:  budget iteration step in millions, defaults to 1 (i.e. 1M) (to calculate curves)</li>\n<li><strong>bdg_max</strong>:  maximum budget size (all options with larger budgets to be dropped)</li>\n<li><strong>fixed_vars</strong>:  translation variables with their values to be fixed across grid</li>\n<li><strong>cores</strong>:  number of processor cores to use in multiprocessing calculations.\nNone sets to all computer logical cores - 1</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>adhoc_curves_max_costs</strong>:  adhoc function to set maximum observed values for every variable (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">trans_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set_crv</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">budget_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">bdg_max</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">301</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_vars</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;price&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">adhoc_curves_max_costs</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_pptx.export_adstocks", "modulename": "fermatrica_rep.export.export_pptx", "qualname": "export_adstocks", "kind": "function", "doc": "<p>Export adstock (decay, carry-on) curves.</p>\n\n<p>Right now just a wrapper, maybe to be extended later.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>cln_meas</strong>:  column names to be used as measurements</li>\n<li><strong>cln_dim</strong>:  column names to be used as dimensions</li>\n<li><strong>n</strong>:  number of observations per column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">cln_meas</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">cln_dim</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;master&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bs_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;listed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpi_coef&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_pptx.set_config", "modulename": "fermatrica_rep.export.export_pptx", "qualname": "set_config", "kind": "function", "doc": "<p>Sets export configuration to ModelRep reporting setting object and loads empty PPTX presentation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>template_name</strong>:  name of the predefined template or path to the custom template</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>update ModelRep model_rep object and Presentation object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">template_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;blanc&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_results", "modulename": "fermatrica_rep.export.export_results", "kind": "module", "doc": "<p>Export to Excel in specific format.</p>\n"}, {"fullname": "fermatrica_rep.export.export_results.get_data", "modulename": "fermatrica_rep.export.export_results", "qualname": "get_data", "kind": "function", "doc": "<p>Prepare data in some way, with token expanding.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>return_trans</strong>:  return transformed series</li>\n<li><strong>return_detailed</strong>:  return detailed series</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">return_trans</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_detailed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_results.decompose_detailed", "modulename": "fermatrica_rep.export.export_results", "qualname": "decompose_detailed", "kind": "function", "doc": "<p>Get extended decomposition from OLS model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>target_var</strong>:  KPI variable name</li>\n<li><strong>model_name</strong>:  model name in Model.obj.models dictionary, defaults to \"main\"</li>\n<li><strong>return_full</strong>:  return full or just train data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">target_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;main&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_full</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.export_results.save_to_excel", "modulename": "fermatrica_rep.export.export_results", "qualname": "save_to_excel", "kind": "function", "doc": "<p>Save lists of dataframes to XLSX file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list_df</strong>:  list of pandas dataframes</li>\n<li><strong>file_name</strong>:  name of the file to write data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list_df</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.slides", "modulename": "fermatrica_rep.export.slides", "kind": "module", "doc": "<p>Generate specific slides for PPTX export:</p>\n\n<ol>\n<li>fit and predict</li>\n<li>decomposition (dynamic)</li>\n<li>waterfall (decomposition for certain period)</li>\n<li>options summary</li>\n<li>efficiency curves</li>\n<li>adstock (decay, carry-over)</li>\n</ol>\n"}, {"fullname": "fermatrica_rep.export.slides.adstocks", "modulename": "fermatrica_rep.export.slides.adstocks", "kind": "module", "doc": "<p>Generate slide with adstock plot: adstock (decay, carry-over) effect for number of variables\n(marketing tools).</p>\n"}, {"fullname": "fermatrica_rep.export.slides.adstocks.create", "modulename": "fermatrica_rep.export.slides.adstocks", "qualname": "create", "kind": "function", "doc": "<p>Create adstock slide and add to <code>prs</code> PPTX presentation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep reporting settings object</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>cln_meas</strong>:  column names to be used as measurements</li>\n<li><strong>cln_dim</strong>:  column names to be used as dimensions</li>\n<li><strong>n</strong>:  number of observations per column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">presentation</span><span class=\"o\">.</span><span class=\"n\">Presentation</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">cln_meas</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">cln_dim</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;master&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bs_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;listed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpi_coef&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.slides.decomposition", "modulename": "fermatrica_rep.export.slides.decomposition", "kind": "module", "doc": "<p>Generate slide with decomposition plot. Could be used both in retro analysis and in option reporting,\nfor superbrand as a whole and for specific number of variables known as \"SKU\"</p>\n"}, {"fullname": "fermatrica_rep.export.slides.decomposition.create", "modulename": "fermatrica_rep.export.slides.decomposition", "qualname": "create", "kind": "function", "doc": "<p>Create (dynamic) decomposition slide and add to <code>prs</code> PPTX presentation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>fermatrica_rep.extract_effect()</code>)</li>\n<li><strong>option_name</strong>:  name of the option to be reported. To be used only as title here, no impact on program behaviour</li>\n<li><strong>brands</strong>:  superbrand string names as list</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>group_var</strong>:  group entities by variables (list or tuple of strings)</li>\n<li><strong>plot_type</strong>:  'retro', 'brand' or 'sku'. Used for naming only</li>\n<li><strong>bs_key_filter</strong>:  list or tuple of 'bs_key' values to preserve</li>\n<li><strong>if_volume</strong>:  optimize volume or value KPI</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>contour_line</strong>:  add contours or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">presentation</span><span class=\"o\">.</span><span class=\"n\">Presentation</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">option_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">group_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;market&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;brand&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bs_key_filter</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_volume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">contour_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.slides.fit_predict", "modulename": "fermatrica_rep.export.slides.fit_predict", "kind": "module", "doc": "<p>Generate slide with fit and prediction plot. Could be used both in retro analysis and in option reporting,\nfor superbrand as a whole and for specific number of variables known as \"SKU\"</p>\n"}, {"fullname": "fermatrica_rep.export.slides.fit_predict.create", "modulename": "fermatrica_rep.export.slides.fit_predict", "qualname": "create", "kind": "function", "doc": "<p>Create fit-predict slide and add to <code>prs</code> PPTX presentation. Fit-predict slide contains multiple objects,\nso number of worker functions are called from this function.</p>\n\n<p>Main objects of the slide (aside title etc.):</p>\n\n<ol>\n<li>Volume fit-predict plot</li>\n<li>Value fit-predict plot</li>\n<li>Volume yearly table</li>\n<li>Value yearly table</li>\n<li>Option table</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>opt_set</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>option_name</strong>:  name of the option to be reported. To be used only as title here, no impact on program behaviour</li>\n<li><strong>option</strong>:  dictionary containing option to calculate or None for retro-analysis</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>group_var</strong>:  group entities by variables (list or tuple of strings)</li>\n<li><strong>plot_type</strong>:  'retro', 'brand' or 'sku'. Used for naming only</li>\n<li><strong>bs_key_filter</strong>:  list or tuple of 'bs_key' values to preserve</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">presentation</span><span class=\"o\">.</span><span class=\"n\">Presentation</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">option_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">group_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;brand&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bs_key_filter</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.slides.incr_roi", "modulename": "fermatrica_rep.export.slides.incr_roi", "kind": "module", "doc": "<p>Generate 2 slides with efficiency curves (i.e. incremental KPI, profit, ROI) via full curves approach\n(row of options to be calculated): short and long term effects.</p>\n\n<p>To get stable results run <code>fermatrica.options.calc.option_report()</code>\nwith some fixed option (as 'zero') and <code>exact=False</code> before calling <code>fermatrica_rep.export.export_pptx.export_curves()</code>.\nPeriod to take into account could be set via OptionSettings object.</p>\n\n<p>Beware! Multiprocessing calculation to be used by functions of this file.</p>\n"}, {"fullname": "fermatrica_rep.export.slides.incr_roi.create", "modulename": "fermatrica_rep.export.slides.incr_roi", "qualname": "create", "kind": "function", "doc": "<p>Generate efficiency curves slides (i.e. incremental KPI, profit, ROI) via full curves approach\n(row of options to be calculated): short and long term effects. 2 slides should be generated\nwith short and long term curves respectively. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>opt_set_crv</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>translation</strong>:  translation dataframe (from files like <code>options.xlsx</code>, <code>translation</code> sheet)</li>\n<li><strong>budget_step</strong>:  budget iteration step in millions, defaults to 1 (i.e. 1M)</li>\n<li><strong>bdg_max</strong>:  maximum budget size (all options with larger budgets to be dropped)</li>\n<li><strong>adhoc_curves_max_costs</strong>:  adhoc function to set maximum observed values for every variable (optional)</li>\n<li><strong>fixed_vars</strong>:  translation variables with their values to be fixed across grid</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>cores</strong>:  number of processor cores to use in calculations; None sets to all computer logical cores - 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">presentation</span><span class=\"o\">.</span><span class=\"n\">Presentation</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set_crv</span>,</span><span class=\"param\">\t<span class=\"n\">translation</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">budget_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">bdg_max</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">301</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_vars</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;price&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">adhoc_curves_max_costs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.slides.options", "modulename": "fermatrica_rep.export.slides.options", "kind": "module", "doc": "<p>Generate slide(s) with comparative table containing summaries by number of options,\ndefined in <code>options_m</code> dictionary.</p>\n"}, {"fullname": "fermatrica_rep.export.slides.options.create", "modulename": "fermatrica_rep.export.slides.options", "qualname": "create", "kind": "function", "doc": "<p>Generate slide(s) with comparative table containing summaries by number of options,\ndefined in <code>options_m</code> dictionary. If number of options in <code>options_m</code> is more than 4 or 5\nor something, more than 1 slide to be generated to make table neat, readable and user-friendly.</p>\n\n<p>There are two tables to be placed onto slide(s) one below another:</p>\n\n<ol>\n<li>Option (budget) table</li>\n<li>Summary table</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>options_m</strong>:  dictionary of dictionaries defining options to calculate</li>\n<li><strong>opt_set</strong>:  OptionSetting object containing calculate settings</li>\n<li><strong>bs_key_filter</strong>:  list or tuple of 'bs_key' values to preserve</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">presentation</span><span class=\"o\">.</span><span class=\"n\">Presentation</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">options_m</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">bs_key_filter</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.export.slides.waterfall", "modulename": "fermatrica_rep.export.slides.waterfall", "kind": "module", "doc": "<p>Generate slide with waterfall (static decomposition) plot. Could be used both in retro analysis and in option\nreporting. As for now only superbrand export is available (no SKU's). <code>bs_key_filter</code> could also be used\nto filter only some of bs_key of the brands to be reported.</p>\n"}, {"fullname": "fermatrica_rep.export.slides.waterfall.create", "modulename": "fermatrica_rep.export.slides.waterfall", "qualname": "create", "kind": "function", "doc": "<p>Create  waterfall (static decomposition) slide and add to <code>prs</code> PPTX presentation.\nAs for now only superbrand export is available (no SKU's). <code>bs_key_filter</code> could also be used\nto filter only some of bs_key of the brands to be reported.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prs</strong>:  Presentation object from python_pptx package</li>\n<li><strong>model_rep</strong>:  ModelRep object (reporting settings)</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>fermatrica_rep.extract_effect()</code>)</li>\n<li><strong>option_name</strong>:  name of the option to be reported. To be used only as title here, no impact on program behaviour</li>\n<li><strong>brands</strong>:  superbrand string names as list</li>\n<li><strong>date_start</strong>:  start of the period</li>\n<li><strong>date_end</strong>:  end of the period</li>\n<li><strong>absolute_sort</strong>:  sort by absolute values or take into account sign</li>\n<li><strong>plot_type</strong>:  'retro', 'brand' or 'sku'. Used for naming only</li>\n<li><strong>bs_key_filter</strong>:  list or tuple of 'bs_key' values to preserve</li>\n<li><strong>if_volume</strong>:  optimize volume or value KPI</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Presentation object from python_pptx package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"n\">pptx</span><span class=\"o\">.</span><span class=\"n\">presentation</span><span class=\"o\">.</span><span class=\"n\">Presentation</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">option_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">date_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">absolute_sort</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;brand&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bs_key_filter</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_volume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.fit", "modulename": "fermatrica_rep.fit", "kind": "module", "doc": "<p>Report fit and predict of the main model.</p>\n\n<p>For the fit and predict of the category model see <code>fermatrica_rep.category</code>.</p>\n\n<p>Multiple and single plots are defined separately, because intervals could not be plotted\nvia plotly.express friendly interface.</p>\n"}, {"fullname": "fermatrica_rep.fit.fit_main_data", "modulename": "fermatrica_rep.fit", "qualname": "fit_main_data", "kind": "function", "doc": "<p>Prepare data describing main model to plot or use as is. Data is grouped by superbrand\n(umbrella brand), no other option is allowed by now.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>err_int</strong>:  error interval in decimal (typically .1, .05, .2 etc.)</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple of wide and long dataframes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">err_int</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;, &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.fit.fit_main_plot_vol", "modulename": "fermatrica_rep.fit", "qualname": "fit_main_plot_vol", "kind": "function", "doc": "<p>Plot extended fit of target superbrand's volume KPI: fit, interval, error. Faceting is\nnot allowed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>err_int</strong>:  error interval in decimal (typically .1, .05, .2 etc.)</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>target_superbrand</strong>:  umbrella brand to be plotted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">err_int</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">target_superbrand</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.fit.fit_main_plot_val", "modulename": "fermatrica_rep.fit", "qualname": "fit_main_plot_val", "kind": "function", "doc": "<p>Plot extended fit of target superbrand's value KPI: fit, interval, error. Faceting is\nnot allowed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>err_int</strong>:  error interval in decimal (typically .1, .05, .2 etc.)</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>target_superbrand</strong>:  umbrella brand to be plotted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">err_int</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">target_superbrand</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.fit.fit_mult_data", "modulename": "fermatrica_rep.fit", "qualname": "fit_mult_data", "kind": "function", "doc": "<p>Get data to plot fit and predict of the model with faceting. This function prepares data\nallowing plot multiple entities, but without error intervals. If error intervals are required\nand single entity (superbrand) is enough, see <code>fermatrica_rep.fit.fit_main_data</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>err_int</strong>:  error interval in decimal (typically .1, .05, .2 etc.)</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>group_var</strong>:  group entities by variables (list or tuple of strings)</li>\n<li><strong>bs_key_filter</strong>:  list or tuple of 'bs_key' values to preserve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">err_int</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">group_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">bs_key_filter</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;, &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.fit.fit_mult_plot_vol", "modulename": "fermatrica_rep.fit", "qualname": "fit_mult_plot_vol", "kind": "function", "doc": "<p>Plot extended fit of target superbrand's volume KPI: fit, interval, error.</p>\n\n<p>This function plots multiple entities, but without error intervals. If error intervals are required\nand single entity (superbrand) is enough, see <code>fermatrica_rep.fit.fit_main_plot_vol</code>.\nAs for now conversion chain plotting is not supported (could be changed later).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>group_var</strong>:  group entities by variables (list or tuple of strings)</li>\n<li><strong>bs_key_filter</strong>:  list or tuple of 'bs_key' values to preserve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>filled figure (graphic object)</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">group_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">bs_key_filter</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.fit.fit_mult_plot_val", "modulename": "fermatrica_rep.fit", "qualname": "fit_mult_plot_val", "kind": "function", "doc": "<p>Plot extended fit of target superbrand's volume KPI: fit, interval, error.</p>\n\n<p>This function plots multiple entities, but without error intervals. If error intervals are required\nand single entity (superbrand) is enough, see <code>fermatrica_rep.fit.fit_main_plot_val</code>.\nAs for now conversion chain plotting is not supported (could be changed later).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>period: time period / interval to group by</strong>:  'day', 'week', 'month', 'quarter', 'year'</li>\n<li><strong>show_future</strong>:  show future periods or not</li>\n<li><strong>group_var</strong>:  group entities by variables (list or tuple of strings)</li>\n<li><strong>bs_key_filter</strong>:  list or tuple of 'bs_key' values to preserve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>filled figure (graphic object)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;day&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_future</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">group_var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">bs_key_filter</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.model_exp", "modulename": "fermatrica_rep.model_exp", "kind": "module", "doc": "<p>Export model as extended ModelConf (ModelConfExt) XLSX workbook.</p>\n\n<p>Effectively adds new sheets to standard ModelConf with model output data:\nfit-predict, decomposition, waterfall etc.</p>\n"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp", "kind": "class", "doc": "<p>Export model from dashboard: basic ModelConf + calculated metrics, curves, decomposition etc.</p>\n", "bases": "fermatrica.model.model_conf.ModelConf"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.__init__", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.__init__", "kind": "function", "doc": "<p>Initialize ModelConfExp instance expanding existing ModelConf object\nwith data to be exported</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_conf</strong>:  ModelConf object to extend</li>\n<li><strong>board_name_list</strong>:  which boards to export (list of string board names)</li>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>split_m_m</strong>:  decomposed prediction data</li>\n<li><strong>curves_simple_data</strong>:  simple curves (simple, fast, limited) data</li>\n<li><strong>curves_full_data</strong>:  full curves (complex, flexible, slow) data</li>\n<li><strong>price</strong>:  product price (numeric)</li>\n<li><strong>conv</strong>:  single conversion rate (numeric)</li>\n<li><strong>period_fit</strong>:  time period to plot fit ('day', 'week', 'month', 'quarter', 'year')</li>\n<li><strong>period_decomp</strong>:  time period to plot decomposition ('day', 'week', 'month', 'quarter', 'year')</li>\n<li><strong>metrics</strong>:  calculated metrics as dataframe</li>\n<li><strong>predictors</strong>:  regression coefficients with estimations and statistics as dataframe</li>\n<li><strong>vifs</strong>:  VIF table</li>\n<li><strong>current_options</strong>:  options dictionary of dictionaries (for every year)</li>\n<li><strong>current_opt_budget_summary</strong>:  optimized budget option summary as dictionary</li>\n<li><strong>current_opt_budget_budget_fr</strong>:  optimized budget option summary as dataframe</li>\n<li><strong>current_opt_target_summary</strong>:  optimized target option summary as dictionary</li>\n<li><strong>current_opt_target_budget_fr</strong>:  optimized target option summary as dataframe</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_conf</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">board_name_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;statistics&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fitness&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;decomposition&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;waterfall&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curves_simple&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curves_full&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;optim&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;transformations&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;export&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">curves_simple_data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">curves_full_data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">price</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">conv</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">period_fit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">period_decomp</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictors</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vifs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">current_options</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">current_opt_budget_summary</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">current_opt_budget_budget_fr</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">current_opt_target_summary</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">current_opt_target_budget_fr</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.state", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.current_options", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.current_options", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.decomposition", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.decomposition", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.curves", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.curves", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.fit", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.fit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.incremental_volume", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.incremental_volume", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.incremental_value", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.incremental_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.profit", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.profit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.roi", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.roi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.incremental_volume_short", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.incremental_volume_short", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.incremental_value_short", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.incremental_value_short", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.profit_short", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.profit_short", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.roi_short", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.roi_short", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.incremental_volume_long", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.incremental_volume_long", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.incremental_value_long", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.incremental_value_long", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.profit_long", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.profit_long", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.roi_long", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.roi_long", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.statistics", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.statistics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.vifs", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.vifs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.ModelConfExp.predictors", "modulename": "fermatrica_rep.model_exp", "qualname": "ModelConfExp.predictors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_exp.export_model", "modulename": "fermatrica_rep.model_exp", "qualname": "export_model", "kind": "function", "doc": "<p>Export model results and info prepared as ModelConfExp</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_exp</strong>:  ModelConfExp object (extended ModelConf)</li>\n<li><strong>mode: export mode</strong>:  \"full\", \"client\", \"analysis\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_exp</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_exp</span><span class=\"o\">.</span><span class=\"n\">ModelConfExp</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;client&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.model_rep", "modulename": "fermatrica_rep.model_rep", "kind": "module", "doc": "<p>Model export settings. Define, _how_ to report: language, colours, export adhoc source code,\ncoefs, translation etc.</p>\n\n<p>ModelRep is deliberately separated from Model object (_what_ to report).</p>\n"}, {"fullname": "fermatrica_rep.model_rep.ModelRep", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep", "kind": "class", "doc": "<p>Model Reporting settings.</p>\n", "bases": "fermatrica_utils.objects.StableClass"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.__init__", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.__init__", "kind": "function", "doc": "<p>Initialise ModelRep instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>vis_dict</strong>:  visual dictionary (if None the default one is used)</li>\n<li><strong>trans_dict</strong>:  translation dictionary (how to \"translate\" options into independent variables)</li>\n<li><strong>language</strong>:  \"english\" and \"russian\" are supported via default vis_dict</li>\n<li><strong>tools_list</strong>:  list of marketing tools to be reported</li>\n<li><strong>palette_sbr_names</strong>:  <code>colorcet</code> palettes to be used for umbrella brands (string names)</li>\n<li><strong>palette_tool_names</strong>:  <code>colorcet</code> palettes to be used for marketing tools (string names)</li>\n<li><strong>adhoc_code</strong>:  adhoc code (Python loaded modules) required by model to be reported</li>\n<li><strong>option_translate_long_fn</strong>:  function to perform translation in long term (by default built-in\nfunction is used)</li>\n<li><strong>option_summary_adhoc_fn</strong>:  adhoc function to summarize options (by default built-in\nfunction is used)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">vis_dict</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trans_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;english&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tools_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">palette_sbr_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;glasbey&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">palette_tool_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;glasbey&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">adhoc_code</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">option_translate_long_fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">option_summary_adhoc_fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.vis_dict", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.vis_dict", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.language", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.language", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.trans_dict", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.trans_dict", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict | None"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.palette_sbr", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.palette_sbr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.palette_tools", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.palette_tools", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.adhoc_code_src", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.adhoc_code_src", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict | None"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.option_translate_long", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.option_translate_long", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.option_summary_adhoc", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.option_summary_adhoc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable]"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.aud_coefs", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.aud_coefs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.set_language", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.set_language", "kind": "function", "doc": "<p>Set export language.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>language</strong>:  \"english\" and \"russian\" are supported via default vis_dict</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.fill_colours", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.fill_colours", "kind": "function", "doc": "<p>Fill export colours with provided <code>colorcet</code> palettes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>tools_list</strong>:  list of marketing tools to be reported</li>\n<li><strong>palette_sbr_names</strong>:  <code>colorcet</code> palettes to be used for umbrella brands (string name)</li>\n<li><strong>palette_tool_names</strong>:  <code>colorcet</code> palettes to be used for martketing tools (string name)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">tools_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">palette_sbr_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;glasbey&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">palette_tool_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;glasbey&#39;</span><span class=\"p\">,)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.fill_colours_sbr", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.fill_colours_sbr", "kind": "function", "doc": "<p>Fill superbrand (umbrella brand) names.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entities_new</strong>:  dictionary or list with elements to be checked with entities_old and added to it\nif not yet</li>\n<li><strong>palette_names</strong>:  colorcet palette names</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entities_new</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">palette_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;glasbey&#39;</span><span class=\"p\">,)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.fill_colours_tools", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.fill_colours_tools", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entities_new</strong>:  dictionary or list with elements to be checked with entities_old and added to it\nif not yet</li>\n<li><strong>palette_names</strong>:  colorcet palette names</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">entities_new</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">palette_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;glasbey&#39;</span><span class=\"p\">,)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.model_rep.ModelRep.fill_adhoc_code_src", "modulename": "fermatrica_rep.model_rep", "qualname": "ModelRep.fill_adhoc_code_src", "kind": "function", "doc": "<p>Extract source code from the adhoc modules and keep it as string dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adhoc_code</strong>:  adhoc code (Python loaded modules) required by model to be reported</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">adhoc_code</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options", "modulename": "fermatrica_rep.options", "kind": "module", "doc": "<p>All concerning option calculations:</p>\n\n<ol>\n<li>Prepare data and settings in <code>fermatrica_rep.options.define</code></li>\n<li>Set translators in <code>fermatrica_rep.options.translators</code></li>\n<li>Calculate single option in <code>fermatrica_rep.options.calc</code></li>\n<li>Calculate multiple options without optimization in <code>fermatrica_rep.options.calc_multi</code></li>\n<li>Optimize budget split in <code>fermatrica_rep.options.optim</code></li>\n</ol>\n"}, {"fullname": "fermatrica_rep.options.calc", "modulename": "fermatrica_rep.options.calc", "kind": "module", "doc": "<p>Calculate option: given known media and non-media specification for some period\n(mostly future one), apply it to the dataset, calculate prediction and\nget summaries.</p>\n\n<p>Main steps of the calculation process are:</p>\n\n<ol>\n<li>Translate option into real data (yearly budget to weekly/monthly OTS etc.)</li>\n<li>Run transformation and prediction with updated data</li>\n<li>Summarize results to get quick access to business valuable metrics\n(yearly sales, uplifts etc.)</li>\n</ol>\n\n<p>If there are many options, multiprocessing could be used, so beware to use it\nin the environment allowing multiprocessing.</p>\n"}, {"fullname": "fermatrica_rep.options.calc.option_translate_long", "modulename": "fermatrica_rep.options.calc", "qualname": "option_translate_long", "kind": "function", "doc": "<p>Translate specific option to the specific period and corresponding periods in next years.</p>\n\n<p>IMPORTANT. Do not call this function directly, add to ModelRep and use as ModelRep.option_translate_long().\nThis approach allows to use adhoc long-translation function if necessary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_conf</strong>:  ModelConf object (part of Model). Used instead of Model to boost performance\nin situation where user's code is not expected</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>option_dict</strong>:  budget option / scenario to calculate as dictionary</li>\n<li><strong>option_settings: OptionSettings object (option setting</strong>:  target period etc.)</li>\n<li><strong>allow_past</strong>:  allow translation to the past (filled with observed data) periods</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dataset <code>ds</code> with applied option</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_conf</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">option_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">option_settings</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">allow_past</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc.option_report", "modulename": "fermatrica_rep.options.calc", "qualname": "option_report", "kind": "function", "doc": "<p>Calculate and report specific option:</p>\n\n<ol>\n<li>Translate option into real data (yearly budget to weekly/monthly OTS etc.)</li>\n<li>Run transformation and prediction with updated data</li>\n<li>Summarize results to get quick access to business valuable metrics\n(yearly sales, uplifts etc.)</li>\n</ol>\n\n<p>Higher-level function to be used directly in user's pipeline.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>option_dict</strong>:  budget option / scenario to calculate as dictionary or list of option dictionaries</li>\n<li><strong>option_settings: OptionSettings object (option setting</strong>:  target period etc.) or list of OptionSettings</li>\n<li><strong>targets_new: apply option to one entity, summarize another (useful for cross-elasticity). If not None</strong>: \n{'targets_new': [], 'apply_vars_new': []}</li>\n<li><strong>allow_past</strong>:  allow translation to the past (filled with observed data) periods</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>if_multi</strong>:  return only summary, without data and prediction (use if a lot of options are calculated\nand only summaries are actually necessary)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(1, summary) or (dataset, prediction data, summary). 1 is required for technical reasons</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">option_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">option_settings</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">targets_new</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_past</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_multi</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc.option_summarize_exact", "modulename": "fermatrica_rep.options.calc", "qualname": "option_summarize_exact", "kind": "function", "doc": "<p>Summarize option for the exact period of translation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_conf</strong>:  ModelConf object (part of Model). Used instead of Model to boost performance\nin situation where user's code is not expected</li>\n<li><strong>option_settings: OptionSettings object (option setting</strong>:  target period etc.)</li>\n<li><strong>dt_pred</strong>:  prediction data (table)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>summary dictionary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_conf</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">option_settings</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc.option_summarize", "modulename": "fermatrica_rep.options.calc", "qualname": "option_summarize", "kind": "function", "doc": "<p>Summarize option for both exact and long-term periods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_conf</strong>:  ModelConf object (part of Model). Used instead of Model to boost performance\nin situation where user's code is not expected</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>option_dict</strong>:  budget option / scenario to calculate as dictionary or list of option dictionaries</li>\n<li><strong>option_settings: OptionSettings object (option setting</strong>:  target period etc.) or list of OptionSettings</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>targets_new: apply option to one entity, summarize another (useful for cross-elasticity). If not None</strong>: \n{'targets_new': [], 'apply_vars_new': []}</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>summary dictionary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_conf</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">option_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">option_settings</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">targets_new</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc.option_report_multi", "modulename": "fermatrica_rep.options.calc", "qualname": "option_report_multi", "kind": "function", "doc": "<p>Calculate and report multiple options using multiprocessing.\nPass options and options settings as dictionary of dictionaries and dictionary of OptionsSettings objects\nrespectively.</p>\n\n<p>Version 1, lesser used.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>option_dict_d</strong>:  dictionary of budget options / scenarios to calculate as dictionary</li>\n<li><strong>option_settings: OptionSettings object (option setting</strong>:  target period etc.)</li>\n<li><strong>allow_past</strong>:  allow translation to the past (filled with observed data) periods</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>if_multi</strong>:  return only summary, without data and prediction (use if a lot of options are calculated\nand only summaries are actually necessary)</li>\n<li><strong>cores</strong>:  number of processor cores to use in calculations</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary of summaries</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">option_dict_d</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">option_settings</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">allow_past</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_multi</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc.option_report_multi_var", "modulename": "fermatrica_rep.options.calc", "qualname": "option_report_multi_var", "kind": "function", "doc": "<p>Calculate and report multiple options using multiprocessing.\nPass options and options settings as dictionary of dictionaries and dictionary of OptionsSettings objects\nrespectively.</p>\n\n<p>Version 2, actively used.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>option_dict_d</strong>:  dictionary of budget options / scenarios to calculate as dictionary</li>\n<li><strong>option_settings: OptionSettings object (option setting</strong>:  target period etc.)</li>\n<li><strong>targets_new: apply option to one entity, summarize another (useful for cross-elasticity). If not None</strong>: \n{'targets_new': [], 'apply_vars_new': []}</li>\n<li><strong>allow_past</strong>:  allow translation to the past (filled with observed data) periods</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>if_multi</strong>:  return only summary, without data and prediction (use if a lot of options are calculated\nand only summaries are actually necessary)</li>\n<li><strong>cores</strong>:  number of processor cores to use in calculations</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary of summaries</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">option_dict_d</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">option_settings</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">targets_new</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_past</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_multi</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc_multi", "modulename": "fermatrica_rep.options.calc_multi", "kind": "module", "doc": "<p>Calculate and report multiple options with grid of options. Use it to calculate efficiency curves\n(full version) and option combinations without optimisation.</p>\n"}, {"fullname": "fermatrica_rep.options.calc_multi.opt_grid", "modulename": "fermatrica_rep.options.calc_multi", "qualname": "opt_grid", "kind": "function", "doc": "<p>Create empty option grid (effectively dataframe) to fill with prediction summaries per option.</p>\n\n<p>This version gets range and step for a couple of variables and creates grid, where only one\nvariable for every option is changed and all others are set to 0.</p>\n\n<p>Use it to calculate curves, i.e. range of growing budgets for specific marketing tool:\ndigital OLV range (1, 10), step 1 means: [1M, 2M, 3M, 4M, 5M, 6M, 7M, 8M, 9M, 10M] in OLV,\nall other tools are fixed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>translation</strong>:  translation dataframe (from files like <code>options.xlsx</code>, <code>translation</code> sheet)</li>\n<li><strong>budget_step</strong>:  budget iteration step in millions, defaults to 1 (i.e. 1M)</li>\n<li><strong>fixed_vars</strong>:  translation variables with their values to be fixed across grid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>grid dataframe with multiple options ready to be filled</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">translation</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">budget_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_vars</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc_multi.opt_grid_expand", "modulename": "fermatrica_rep.options.calc_multi", "qualname": "opt_grid_expand", "kind": "function", "doc": "<p>Create empty option grid (effectively dataframe) to fill with prediction summaries per option.</p>\n\n<p>This version gets range (borders) and step for a couple of variables and creates grid with all\ncombinations available (Cartesian product).</p>\n\n<p>Use it to find near optimal solutions for large number of budget sizes, if algorithmic optimisation\nis not available or less performance efficient than grid search (e.g. number of combinations\nfor every budget size is 100 and number of algo iterations per budget size is 300).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>borders</strong>:  dictionary of low and upper borders for every variable to vary</li>\n<li><strong>budget_step</strong>:  budget iteration step in millions, defaults to 1 (i.e. 1M)</li>\n<li><strong>fixed_vars</strong>:  translation variables with their values to be fixed across grid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>grid dataframe with multiple options ready to be filled</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">borders</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">budget_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_vars</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.calc_multi.option_report_multi_post", "modulename": "fermatrica_rep.options.calc_multi", "qualname": "option_report_multi_post", "kind": "function", "doc": "<p>Calculate and report multiple options with grid of options.</p>\n\n<p>Higher-level function for multiple option calculations. Use it to calculate efficiency curves\n(full version) and option combinations without optimisation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>opt_set: OptionSettings object (option setting</strong>:  target period etc.)</li>\n<li><strong>translation</strong>:  translation dataframe (from files like <code>options.xlsx</code>, <code>translation</code> sheet)</li>\n<li><strong>adhoc_curves_max_costs</strong>:  adhoc function to set maximum observed values for every variable (optional)</li>\n<li><strong>budget_step</strong>:  budget iteration step in millions, defaults to 1 (i.e. 1M)</li>\n<li><strong>fixed_vars</strong>:  translation variables with their values to be fixed across grid</li>\n<li><strong>cores</strong>:  number of processor cores to use in calculations; None sets to all computer logical cores - 1</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>grid_type</strong>:  \"curves\" or \"cartesian\"</li>\n<li><strong>borders</strong>:  dictionary of low and upper borders for every variable to vary (only if <code>grid_type</code> set to\n\"cartesian\", otherwise ignored)</li>\n<li><strong>bdg_max</strong>:  maximum budget size (all options with larger budgets to be dropped)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>options summaries per every option with option split and info, as dataframe</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">translation</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">adhoc_curves_max_costs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">budget_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_vars</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">grid_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;curves&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">borders</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bdg_max</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">301</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.define", "modulename": "fermatrica_rep.options.define", "kind": "module", "doc": "<p>Define option and translation settings and prepare dataset for option calculation.</p>\n"}, {"fullname": "fermatrica_rep.options.define.trans_dict_create", "modulename": "fermatrica_rep.options.define", "qualname": "trans_dict_create", "kind": "function", "doc": "<p>Create translation rules dictionary from XLSX path or y from DataFrame. Set either <code>path</code> or\n<code>dt_trans</code> respectively. It binds tool name with translation function, data variable and max\nbudget if curves to be calculated.</p>\n\n<p>Translation dictionary is vital for option calculation and hence for the export of future\nperiods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt_trans</strong>:  translation dataframe (as <code>translation</code> sheet in \"options.xlsx\" file)</li>\n<li><strong>path</strong>:  path to XLSX file like \"options.xlsx\" with <code>sheet</code> sheet</li>\n<li><strong>sheet</strong>:  name of the sheet with translation data (only if <code>path</code> is set), defaults to\n\"translation\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>translation dictionary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dt_trans</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sheet</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;translation&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.define.budget_dict_create", "modulename": "fermatrica_rep.options.define", "qualname": "budget_dict_create", "kind": "function", "doc": "<p>Create budget dictionary from raw dictionary or from XLSX path. Budget dictionary is dictionary\ncontaining named options prepared by user by hand.</p>\n\n<p>Use the function to load manually prepared options to the environment.\nSet either <code>dct</code> to create from existing dictionary or <code>dct</code> to load from disc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dct</strong>:  raw dictionary (in a form of a dictionary or a dataframe)</li>\n<li><strong>path</strong>:  path to XLSX file like \"options.xlsx\" with <code>sheet</code> sheet</li>\n<li><strong>sheet</strong>:  name of the sheet with option data (only if <code>path</code> is set), defaults to\n\"main\"</li>\n<li><strong>vat_rate</strong>:  VAT rate, defaults to 0. Set it different if costs used in the model include VAT</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with named options as separate items</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dct</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sheet</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;main&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vat_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.define.media_ssn_apply", "modulename": "fermatrica_rep.options.define", "qualname": "media_ssn_apply", "kind": "function", "doc": "<p>Apply media seasonality to main dataset. Media seasonality is here for distribution of\nyearly budget by specific periods (months, weeks) within year.</p>\n\n<p>Media seasonality data to be passed either via <code>path</code> and <code>sheet</code> args (to load from\ndisc) or as already existing dataframe as <code>dt_ssn</code> argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>dt_ssn</strong>:  media seasonal distribution data (optional)</li>\n<li><strong>path</strong>:  path to XLSX file like \"seasonality.xlsx\" with <code>sheet</code> sheet</li>\n<li><strong>sheet</strong>:  name of the sheet with option data (only if <code>path</code> is set), defaults to\n\"data\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>ds</code> main dataset</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">dt_ssn</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sheet</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.define.OptionSettings", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings", "kind": "class", "doc": "<p>Option settings / controls. Effectively structure rather than class.</p>\n", "bases": "fermatrica_utils.objects.StableClass"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.__init__", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.__init__", "kind": "function", "doc": "<p>Initialize class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target</strong>:  values of variables listed in <code>apply_vars</code> to apply option. Could be string\n\"my_brand\" or tuple / list of strings or of tuples / lists [[\"my_brand\"], [\"market_1\", \"market_2\"]]</li>\n<li><strong>date_start</strong>:  start of the period to apply option</li>\n<li><strong>date_end</strong>:  end of the period to apply option</li>\n<li><strong>ref_date_start</strong>:  start of the reference period (to calculate growth)</li>\n<li><strong>ref_date_end</strong>:  end of the reference period (to calculate growth)</li>\n<li><strong>apply_vars</strong>:  variable to apply option. Could be string\n\"superbrand\" or tuple / list of strings [\"superbrand\", \"market\"]</li>\n<li><strong>plan_period: planning period</strong>:  'exact', 'year', 'hy', 'quarter'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">date_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">ref_date_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">ref_date_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">apply_vars</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">plan_period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;year&#39;</span></span>)</span>"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.target", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.target", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.date_start", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.date_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | datetime.date"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.date_end", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.date_end", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | datetime.date"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.ref_date_start", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.ref_date_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | datetime.date"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.ref_date_end", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.ref_date_end", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | datetime.date"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.plan_period", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.plan_period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.apply_vars", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.apply_vars", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "fermatrica_rep.options.define.OptionSettings.zip_mask", "modulename": "fermatrica_rep.options.define", "qualname": "OptionSettings.zip_mask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica_rep.options.optim", "modulename": "fermatrica_rep.options.optim", "kind": "module", "doc": "<p>Algorithmic optimization of the budget split: either maximising KPI with\nknown budget or minimising budget with known KPI.</p>\n\n<p>As for now COBYLA constrained optimization by local approximations is used\nas fairly well suited for optimization with complex and not known in advance\nmodel structure.</p>\n\n<p>Beware! Multiprocessing calculations are used.</p>\n"}, {"fullname": "fermatrica_rep.options.optim.optimize_budget_local_cobyla", "modulename": "fermatrica_rep.options.optim", "qualname": "optimize_budget_local_cobyla", "kind": "function", "doc": "<p>Maximize KPI with known budget via COBYLA constrained optimization by local approximations algorithm (local).\nCOBYLA is derivative-free, so no analytical gradient is required.</p>\n\n<p>Epochs are required to shuffle params a bit and to help algo get out from local optimum (sometimes)\nand to speed up calculation.</p>\n\n<p>Early stop threshold is defined as minimum absolute score gain per iteration. However, algo doesn't\nrespect it directly, so don't be upset to see it working with much lesser gain per iteration.</p>\n\n<p>For more hints about COBYLA algorithm check docs of <code>fermatrica.model.optim.optimize_local_cobyla</code>\nor <a href=\"https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#cobyla-constrained-optimization-by-linear-approximations\">https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#cobyla-constrained-optimization-by-linear-approximations</a>\nand Powell's articles mentioned via link.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>borders_dict</strong>:  dictionary of low and upper borders for every variable to vary</li>\n<li><strong>option</strong>:  base budget option / scenario to calculate as dictionary. Optimized values to be inserted\nin this option when optimizing and later export</li>\n<li><strong>option</strong>:  base budget option / scenario to calculate as dictionary. Optimized values to be inserted\nin this option when optimizing and later export</li>\n<li><strong>opt_set: OptionSettings object (option setting</strong>:  target period etc.)</li>\n<li><strong>bdg_size</strong>:  fixed budget size (we change budget split, but not budget size)</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>if_volume</strong>:  optimize volume or value KPI</li>\n<li><strong>epochs</strong>:  number of epochs</li>\n<li><strong>iters_epoch</strong>:  number of objective function calculations per epoch</li>\n<li><strong>error_score</strong>:  extremely big value to be used as score if fit_predict returns None (error)</li>\n<li><strong>ftol_abs: early stop threshold</strong>:  minimum absolute objective function return value gain per iteration</li>\n<li><strong>xtol_abs: early stop threshold</strong>:  minimum absolute change of independent variable</li>\n<li><strong>verbose</strong>:  print diagnostic or progress information</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>optimal option as dict</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">borders_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"o\">.</span><span class=\"n\">OptionSettings</span>,</span><span class=\"param\">\t<span class=\"n\">bdg_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_volume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">iters_epoch</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">error_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1000000000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">ftol_abs</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">xtol_abs</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.optim.optimize_target_local_cobyla", "modulename": "fermatrica_rep.options.optim", "qualname": "optimize_target_local_cobyla", "kind": "function", "doc": "<p>Minimize budget size to achieve known KPI via COBYLA constrained optimization by local approximations\nalgorithm (local). COBYLA is derivative-free, so no analytical gradient is required.</p>\n\n<p>Epochs are required to shuffle params a bit and to help algo get out from local optimum (sometimes)\nand to speed up calculation.</p>\n\n<p>Early stop threshold is defined as minimum absolute score gain per iteration. However, algo doesn't\nrespect it directly, so don't be upset to see it working with much lesser gain per iteration.</p>\n\n<p>For more hints about COBYLA algorithm check docs of <code>fermatrica.model.optim.optimize_local_cobyla</code>\nor <a href=\"https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#cobyla-constrained-optimization-by-linear-approximations\">https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#cobyla-constrained-optimization-by-linear-approximations</a>\nand Powell's articles mentioned via link.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>borders_dict</strong>:  dictionary of low and upper borders for every variable to vary</li>\n<li><strong>option</strong>:  base budget option / scenario to calculate as dictionary. Optimized values to be inserted\nin this option when optimizing and later export</li>\n<li><strong>option</strong>:  base budget option / scenario to calculate as dictionary. Optimized values to be inserted\nin this option when optimizing and later export</li>\n<li><strong>opt_set: OptionSettings object (option setting</strong>:  target period etc.)</li>\n<li><strong>trg</strong>:  target (KPI) value to achieve with minimum budget</li>\n<li><strong>trg_tol_ratio: tolerance ratio for target (KPI) value</strong>:  how small difference consider as nearly equal</li>\n<li><strong>if_exact</strong>:  apply only to the specific time period, without next years</li>\n<li><strong>if_volume</strong>:  optimize volume or value KPI</li>\n<li><strong>epochs</strong>:  number of epochs</li>\n<li><strong>iters_epoch</strong>:  number of objective function calculations per epoch</li>\n<li><strong>error_score</strong>:  extremely big value to be used as score if fit_predict returns None (error)</li>\n<li><strong>ftol_abs: early stop threshold</strong>:  minimum absolute objective function return value gain per iteration</li>\n<li><strong>xtol_abs: early stop threshold</strong>:  minimum absolute change of independent variable</li>\n<li><strong>verbose</strong>:  print diagnostic or progress information</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>optimal option as dict</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">borders_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">opt_set</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">trg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">trg_tol_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">if_exact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_volume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">iters_epoch</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">error_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1000000000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">ftol_abs</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">xtol_abs</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators", "modulename": "fermatrica_rep.options.translators", "kind": "module", "doc": "<p>Standard translators media budget -> media variable per media.</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n"}, {"fullname": "fermatrica_rep.options.translators.basic", "modulename": "fermatrica_rep.options.translators", "qualname": "basic", "kind": "function", "doc": "<p>Most standard / basic translation.\nTranslate / apply budget to media variable 1 to 1, with respect to seasonality and media price.</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators.basic_fix", "modulename": "fermatrica_rep.options.translators", "qualname": "basic_fix", "kind": "function", "doc": "<p>Translate / apply budget to some 'fixed' variable 1 to 1, w/o seasonality, media price and Mln conversion.\nUse it for non-media variables mostly, such as constant market metrics etc.</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators.price", "modulename": "fermatrica_rep.options.translators", "qualname": "price", "kind": "function", "doc": "<p>Standard price as fractions / ratios to basic price (price_..._back).</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators.tv_complex", "modulename": "fermatrica_rep.options.translators", "qualname": "tv_complex", "kind": "function", "doc": "<p>Complex TV translation with respect to affinities and TV audience sizes.\nUse it as a worker function with extended interface to create final function with standard translation params.\nSome standard functions are defined below, for any changes it is recommended to define simple\nad hoc function on the project level.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n<li><strong>clip_dur</strong>:  TV clip duration (fixed over filtered data)</li>\n<li><strong>tv_type</strong>:  TV type string as TV variables contain. TV OTS and TV clip duration variables\nshould be named using the same pattern, defaults to \"rolik_nat\"</li>\n<li><strong>media_prefix</strong>:  prefix setting media measure type, defaults to \"ots\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">clip_dur</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">tv_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rolik_nat&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">media_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ots&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators.nat_tv_complex", "modulename": "fermatrica_rep.options.translators", "qualname": "nat_tv_complex", "kind": "function", "doc": "<p>National TV: complex TV translation with respect to affinities and TV audience sizes.</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators.reg_tv_complex", "modulename": "fermatrica_rep.options.translators", "qualname": "reg_tv_complex", "kind": "function", "doc": "<p>Regional TV: complex TV translation with respect to affinities and TV audience sizes.</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators.nat_tv_sponsor_complex", "modulename": "fermatrica_rep.options.translators", "qualname": "nat_tv_sponsor_complex", "kind": "function", "doc": "<p>National TV sponsor: complex TV translation with respect to affinities and TV audience sizes.</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.options.translators.brnd_nat_tv_complex", "modulename": "fermatrica_rep.options.translators", "qualname": "brnd_nat_tv_complex", "kind": "function", "doc": "<p>National TV extended: complex TV translation with respect to affinities and TV audience sizes.</p>\n\n<p>Translation interface is fixed among all translation functions, so some parameters could look \"excessive\"\nin some functions. Do not remove them!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md</strong>:  ModelConf object (part of Model object, used here for performance efficiency)</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object (export objects).</li>\n<li><strong>var_key</strong>:  media tool key, as in options. E.g. \"dgt_olv\"</li>\n<li><strong>var_name</strong>:  variable name to translate to, as in dataset <code>ds</code>. E.g. \"digital_olv_imp\"</li>\n<li><strong>val</strong>:  value to set to <code>var_name</code> over filtered part of dataset</li>\n<li><strong>ds_mask</strong>:  mask to filter dataset to apply <code>val</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>main dataset with applied <code>val</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">md</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span>,</span><span class=\"param\">\t<span class=\"n\">var_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ds_mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.res", "modulename": "fermatrica_rep.res", "kind": "module", "doc": "<p>FERMATRICA_REP resources used in export.</p>\n"}, {"fullname": "fermatrica_rep.res.dict", "modulename": "fermatrica_rep.res.dict", "kind": "module", "doc": "<p>Dictionaries used in visualising.</p>\n"}, {"fullname": "fermatrica_rep.res.ppt_objects", "modulename": "fermatrica_rep.res.ppt_objects", "kind": "module", "doc": "<p>PowerPoint objects as both XML and plain text files to be inserted into presentation.</p>\n"}, {"fullname": "fermatrica_rep.res.templates", "modulename": "fermatrica_rep.res.templates", "kind": "module", "doc": "<p>Standard presentation templates used to generate slides with model export.</p>\n"}, {"fullname": "fermatrica_rep.stats", "modulename": "fermatrica_rep.stats", "kind": "module", "doc": "<p>Calculate metrics and tests.</p>\n"}, {"fullname": "fermatrica_rep.stats.predictors_table", "modulename": "fermatrica_rep.stats", "qualname": "predictors_table", "kind": "function", "doc": "<p>Linear regression coefficients estimations, standard errors and p-values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table with predictors data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.stats.basic_metrics_table", "modulename": "fermatrica_rep.stats", "qualname": "basic_metrics_table", "kind": "function", "doc": "<p>Basic (model-blind) metric: RMSE, MAPE, R^2.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>mape_threshold</strong>:  threshold for mape_adj</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">mape_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.stats.tests_table_ols", "modulename": "fermatrica_rep.stats", "qualname": "tests_table_ols", "kind": "function", "doc": "<p>Tests specific for time series OLS model (not panel / LME).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span> <span class=\"o\">|</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">OLS</span> <span class=\"o\">|</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">OLSResults</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.stats.metrics_table", "modulename": "fermatrica_rep.stats", "qualname": "metrics_table", "kind": "function", "doc": "<p>All model-level metrics and stats available: basic metrics and model-specific metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>mape_threshold</strong>:  threshold for mape_adj</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">mape_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.stats.metrics_group_table", "modulename": "fermatrica_rep.stats", "qualname": "metrics_group_table", "kind": "function", "doc": "<p>Calculate metrics by group, e.g. by superbrand (umbrella brand), market, region etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt_pred</strong>:  prediction data</li>\n<li><strong>group_vars</strong>:  calculate metrics by these variables (columns)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dt_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">group_vars</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;market&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;superbrand&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.stats.stats_compare", "modulename": "fermatrica_rep.stats", "qualname": "stats_compare", "kind": "function", "doc": "<p>Compare two versions of the model (older and newer).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_init</strong>:  older Model</li>\n<li><strong>model_update</strong>:  new Model</li>\n<li><strong>dt_pred_init</strong>:  older dataset</li>\n<li><strong>dt_pred_upd</strong>:  new dataset</li>\n<li><strong>mape_threshold</strong>:  threshold for mape_adj (not calculated if None is provided)</li>\n<li><strong>if_return_ds</strong>:  return or print</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>table with statistics and tests or void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_init</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">model_update</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred_init</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">dt_pred_upd</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">mape_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_return_ds</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.stats.vif_table", "modulename": "fermatrica_rep.stats", "qualname": "vif_table", "kind": "function", "doc": "<p>Calculate VIFs for OLS model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_cur</strong>:  statsmodels OLS object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>VIF table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_cur</span><span class=\"p\">:</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">OLS</span> <span class=\"o\">|</span> <span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">regression</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">OLSResults</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.transformation", "modulename": "fermatrica_rep.transformation", "kind": "module", "doc": "<p>Report transformation chains: from raw variable through all transformations one after another\nto the final variable (feature).</p>\n\n<p>Only standard transformations could be reported. Custom transformations don't follow transformation\nAPI and therefore are not reportable.</p>\n"}, {"fullname": "fermatrica_rep.transformation.transformation_main_plot", "modulename": "fermatrica_rep.transformation", "qualname": "transformation_main_plot", "kind": "function", "doc": "<p>Plot two bound variables one vs another.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>init_var</strong>:  initial variable name</li>\n<li><strong>fin_var</strong>:  final variable name</li>\n<li><strong>height</strong>:  plot height</li>\n<li><strong>if_main</strong>:  different treatment of combined initial-final plot and one step plot</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">init_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fin_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">if_main</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.transformation.transformation_plot", "modulename": "fermatrica_rep.transformation", "qualname": "transformation_plot", "kind": "function", "doc": "<p>Plot transformations of the variable. Depending on <code>sub</code> argument:\ninitial (raw) variable vs final variable (feature) or step by step in the transformation chain.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>: </li>\n<li><strong>init_var</strong>: </li>\n<li><strong>fin_var</strong>: </li>\n<li><strong>sub</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">init_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fin_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sub</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.waterfall", "modulename": "fermatrica_rep.waterfall", "kind": "module", "doc": "<p>Decompose model into effects (impacts).</p>\n\n<p>This module describes period / interval decomposition, for dynamic decomposition see <code>fermatrica_rep.decomposition</code>.\nData preparation (<code>split_m_m</code>) is also defined in <code>fermatrica_rep.decomposition</code>.</p>\n"}, {"fullname": "fermatrica_rep.waterfall.waterfall_plot", "modulename": "fermatrica_rep.waterfall", "qualname": "waterfall_plot", "kind": "function", "doc": "<p>Plot decomposition for specific period from <code>date_start</code> to <code>date_end</code> as waterfall.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>fermatrica_rep.extract_effect()</code>)</li>\n<li><strong>brands</strong>:  list of umbrella brands to preserve</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>date_start</strong>:  start of the period</li>\n<li><strong>date_end</strong>:  end of the period</li>\n<li><strong>absolute_sort</strong>:  sort by absolute or signed values</li>\n<li><strong>pos_neg</strong>:  colorize by brand or by positive/negative impacts</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">date_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2020-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">absolute_sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">pos_neg</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.waterfall.waterfall_data", "modulename": "fermatrica_rep.waterfall", "qualname": "waterfall_data", "kind": "function", "doc": "<p>Prepare data for waterfall plots.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>fermatrica_rep.extract_effect()</code>)</li>\n<li><strong>brands</strong>:  list of umbrella brands to preserve</li>\n<li><strong>date_start</strong>:  start of the period</li>\n<li><strong>date_end</strong>:  end of the period</li>\n<li><strong>absolute_sort</strong>:  sort by absolute or signed values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">date_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2020-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">absolute_sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.waterfall.waterfall_plot_native", "modulename": "fermatrica_rep.waterfall", "qualname": "waterfall_plot_native", "kind": "function", "doc": "<p>Plot native waterfall - with positive and negative coloration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>fermatrica_rep.extract_effect()</code>)</li>\n<li><strong>brands</strong>:  list of umbrella brands to preserve</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>date_start</strong>:  start of the period</li>\n<li><strong>date_end</strong>:  end of the period</li>\n<li><strong>absolute_sort</strong>:  sort by absolute or signed values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">date_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2020-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">absolute_sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">plotly</span><span class=\"o\">.</span><span class=\"n\">graph_objs</span><span class=\"o\">.</span><span class=\"n\">_figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica_rep.waterfall.waterfall_plot_bar", "modulename": "fermatrica_rep.waterfall", "qualname": "waterfall_plot_bar", "kind": "function", "doc": "<p>Plot waterfall based on barplot to get by brand coloration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>split_m_m</strong>:  prepared dataset (see <code>fermatrica_rep.extract_effect()</code>)</li>\n<li><strong>brands</strong>:  list of umbrella brands to preserve</li>\n<li><strong>model_rep</strong>:  ModelRep object (export settings)</li>\n<li><strong>date_start</strong>:  start of the period</li>\n<li><strong>date_end</strong>:  end of the period</li>\n<li><strong>absolute_sort</strong>:  sort by absolute or signed values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">split_m_m</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">brands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_rep</span><span class=\"o\">.</span><span class=\"n\">model_rep</span><span class=\"o\">.</span><span class=\"n\">ModelRep</span>,</span><span class=\"param\">\t<span class=\"n\">date_start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2020-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;2021-01-01&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">absolute_sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">plotly</span><span class=\"o\">.</span><span class=\"n\">graph_objs</span><span class=\"o\">.</span><span class=\"n\">_figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();